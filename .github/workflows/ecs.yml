name: Deploy to Amazon ECS

on:
 push:
   branches:
     - master
     - feature/*
 pull_request:

env:
  ECR_REPOSITORY_API: "oldwave_api"
  ECR_REPOSITORY_NGNIX: "oldwave_nginx"

jobs:
  tests:
   runs-on: ubuntu-latest
   strategy:
     matrix:
       php: [8.1]
 
   name: Test - PHP ${{ matrix.php }}
 
   steps:
     - name: Checkout code
       uses: actions/checkout@v2
 
     - name: Cache PHP dependencies
       uses: actions/cache@v1
       with:
         path: vendor
         key: dependencies-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
 
     - name: Setup PHP
       uses: shivammathur/setup-php@v2
       with:
         php-version: ${{ matrix.php }}
         extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd
         coverage: none
 
     - name: Copy ENV Laravel Configuration for CI
       run: php -r "file_exists('.env') || copy('.env.example', '.env');"
 
     - name: Copy dotenv file
       run: php -r "file_put_contents(__DIR__ . '/.env', '${{ secrets.DOT_ENV_ST }}');"
        
     - name: Install dependencies
       run: composer install --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
 
     - name: Generate key
       run: php artisan key:generate
 
     - name: Execute tests
       run: vendor/bin/phpunit --verbose
  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache PHP dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: dependencies-php-composer-${{ hashFiles('**/composer.lock') }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd
          coverage: none

      - name: Install dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Copy dotenv file
        run: php -r "file_put_contents(__DIR__ . '/.env', '${{ secrets.DOT_ENV }}');"
        
      - name: Cat .env file
        run: cat .env

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker-compose build
          docker tag $ECR_REPOSITORY_API:latest $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          echo "setting output values"
          echo "::set-output name=appimage::$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"

      - name: Print the image name
        run: |
          echo the images are
          echo ${{ steps.build-image.outputs.appimage }}
          echo ${{ steps.build-image.outputs.webimage }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new api image ID in the Amazon ECS task definition
        id: api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          container-name: ${{ secrets.ECS_API_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.appimage }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.api-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
